
stm32f1xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000f5c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800108c  0800108c  000203fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800108c  0800108c  000203fc  2**0
                  CONTENTS
  4 .ARM          00000000  0800108c  0800108c  000203fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800108c  0800108c  000203fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800108c  0800108c  0001108c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001090  08001090  00011090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003fc  20000000  08001094  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000044  200003fc  08001490  000203fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000440  08001490  00020440  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000203fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000033e7  00000000  00000000  00020425  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000092a  00000000  00000000  0002380c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000190  00000000  00000000  00024138  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000148  00000000  00000000  000242c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00001a99  00000000  00000000  00024410  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001c6a  00000000  00000000  00025ea9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000c001  00000000  00000000  00027b13  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00033b14  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000638  00000000  00000000  00033b90  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	200003fc 	.word	0x200003fc
 800014c:	00000000 	.word	0x00000000
 8000150:	08001074 	.word	0x08001074

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000400 	.word	0x20000400
 800016c:	08001074 	.word	0x08001074

08000170 <strlen>:
 8000170:	4603      	mov	r3, r0
 8000172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000176:	2a00      	cmp	r2, #0
 8000178:	d1fb      	bne.n	8000172 <strlen+0x2>
 800017a:	1a18      	subs	r0, r3, r0
 800017c:	3801      	subs	r0, #1
 800017e:	4770      	bx	lr

08000180 <__aeabi_drsub>:
 8000180:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000184:	e002      	b.n	800018c <__adddf3>
 8000186:	bf00      	nop

08000188 <__aeabi_dsub>:
 8000188:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800018c <__adddf3>:
 800018c:	b530      	push	{r4, r5, lr}
 800018e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000192:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000196:	ea94 0f05 	teq	r4, r5
 800019a:	bf08      	it	eq
 800019c:	ea90 0f02 	teqeq	r0, r2
 80001a0:	bf1f      	itttt	ne
 80001a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001b2:	f000 80e2 	beq.w	800037a <__adddf3+0x1ee>
 80001b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001be:	bfb8      	it	lt
 80001c0:	426d      	neglt	r5, r5
 80001c2:	dd0c      	ble.n	80001de <__adddf3+0x52>
 80001c4:	442c      	add	r4, r5
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	ea82 0000 	eor.w	r0, r2, r0
 80001d2:	ea83 0101 	eor.w	r1, r3, r1
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	2d36      	cmp	r5, #54	; 0x36
 80001e0:	bf88      	it	hi
 80001e2:	bd30      	pophi	{r4, r5, pc}
 80001e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f4:	d002      	beq.n	80001fc <__adddf3+0x70>
 80001f6:	4240      	negs	r0, r0
 80001f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000200:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000204:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x84>
 800020a:	4252      	negs	r2, r2
 800020c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000210:	ea94 0f05 	teq	r4, r5
 8000214:	f000 80a7 	beq.w	8000366 <__adddf3+0x1da>
 8000218:	f1a4 0401 	sub.w	r4, r4, #1
 800021c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000220:	db0d      	blt.n	800023e <__adddf3+0xb2>
 8000222:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000226:	fa22 f205 	lsr.w	r2, r2, r5
 800022a:	1880      	adds	r0, r0, r2
 800022c:	f141 0100 	adc.w	r1, r1, #0
 8000230:	fa03 f20e 	lsl.w	r2, r3, lr
 8000234:	1880      	adds	r0, r0, r2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	4159      	adcs	r1, r3
 800023c:	e00e      	b.n	800025c <__adddf3+0xd0>
 800023e:	f1a5 0520 	sub.w	r5, r5, #32
 8000242:	f10e 0e20 	add.w	lr, lr, #32
 8000246:	2a01      	cmp	r2, #1
 8000248:	fa03 fc0e 	lsl.w	ip, r3, lr
 800024c:	bf28      	it	cs
 800024e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000252:	fa43 f305 	asr.w	r3, r3, r5
 8000256:	18c0      	adds	r0, r0, r3
 8000258:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800025c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000260:	d507      	bpl.n	8000272 <__adddf3+0xe6>
 8000262:	f04f 0e00 	mov.w	lr, #0
 8000266:	f1dc 0c00 	rsbs	ip, ip, #0
 800026a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000272:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000276:	d31b      	bcc.n	80002b0 <__adddf3+0x124>
 8000278:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800027c:	d30c      	bcc.n	8000298 <__adddf3+0x10c>
 800027e:	0849      	lsrs	r1, r1, #1
 8000280:	ea5f 0030 	movs.w	r0, r0, rrx
 8000284:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000288:	f104 0401 	add.w	r4, r4, #1
 800028c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000290:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000294:	f080 809a 	bcs.w	80003cc <__adddf3+0x240>
 8000298:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800029c:	bf08      	it	eq
 800029e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002a2:	f150 0000 	adcs.w	r0, r0, #0
 80002a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002aa:	ea41 0105 	orr.w	r1, r1, r5
 80002ae:	bd30      	pop	{r4, r5, pc}
 80002b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b4:	4140      	adcs	r0, r0
 80002b6:	eb41 0101 	adc.w	r1, r1, r1
 80002ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002be:	f1a4 0401 	sub.w	r4, r4, #1
 80002c2:	d1e9      	bne.n	8000298 <__adddf3+0x10c>
 80002c4:	f091 0f00 	teq	r1, #0
 80002c8:	bf04      	itt	eq
 80002ca:	4601      	moveq	r1, r0
 80002cc:	2000      	moveq	r0, #0
 80002ce:	fab1 f381 	clz	r3, r1
 80002d2:	bf08      	it	eq
 80002d4:	3320      	addeq	r3, #32
 80002d6:	f1a3 030b 	sub.w	r3, r3, #11
 80002da:	f1b3 0220 	subs.w	r2, r3, #32
 80002de:	da0c      	bge.n	80002fa <__adddf3+0x16e>
 80002e0:	320c      	adds	r2, #12
 80002e2:	dd08      	ble.n	80002f6 <__adddf3+0x16a>
 80002e4:	f102 0c14 	add.w	ip, r2, #20
 80002e8:	f1c2 020c 	rsb	r2, r2, #12
 80002ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f0:	fa21 f102 	lsr.w	r1, r1, r2
 80002f4:	e00c      	b.n	8000310 <__adddf3+0x184>
 80002f6:	f102 0214 	add.w	r2, r2, #20
 80002fa:	bfd8      	it	le
 80002fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000300:	fa01 f102 	lsl.w	r1, r1, r2
 8000304:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000308:	bfdc      	itt	le
 800030a:	ea41 010c 	orrle.w	r1, r1, ip
 800030e:	4090      	lslle	r0, r2
 8000310:	1ae4      	subs	r4, r4, r3
 8000312:	bfa2      	ittt	ge
 8000314:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000318:	4329      	orrge	r1, r5
 800031a:	bd30      	popge	{r4, r5, pc}
 800031c:	ea6f 0404 	mvn.w	r4, r4
 8000320:	3c1f      	subs	r4, #31
 8000322:	da1c      	bge.n	800035e <__adddf3+0x1d2>
 8000324:	340c      	adds	r4, #12
 8000326:	dc0e      	bgt.n	8000346 <__adddf3+0x1ba>
 8000328:	f104 0414 	add.w	r4, r4, #20
 800032c:	f1c4 0220 	rsb	r2, r4, #32
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f302 	lsl.w	r3, r1, r2
 8000338:	ea40 0003 	orr.w	r0, r0, r3
 800033c:	fa21 f304 	lsr.w	r3, r1, r4
 8000340:	ea45 0103 	orr.w	r1, r5, r3
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f1c4 040c 	rsb	r4, r4, #12
 800034a:	f1c4 0220 	rsb	r2, r4, #32
 800034e:	fa20 f002 	lsr.w	r0, r0, r2
 8000352:	fa01 f304 	lsl.w	r3, r1, r4
 8000356:	ea40 0003 	orr.w	r0, r0, r3
 800035a:	4629      	mov	r1, r5
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	fa21 f004 	lsr.w	r0, r1, r4
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	f094 0f00 	teq	r4, #0
 800036a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800036e:	bf06      	itte	eq
 8000370:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000374:	3401      	addeq	r4, #1
 8000376:	3d01      	subne	r5, #1
 8000378:	e74e      	b.n	8000218 <__adddf3+0x8c>
 800037a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037e:	bf18      	it	ne
 8000380:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000384:	d029      	beq.n	80003da <__adddf3+0x24e>
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	d005      	beq.n	800039e <__adddf3+0x212>
 8000392:	ea54 0c00 	orrs.w	ip, r4, r0
 8000396:	bf04      	itt	eq
 8000398:	4619      	moveq	r1, r3
 800039a:	4610      	moveq	r0, r2
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	ea91 0f03 	teq	r1, r3
 80003a2:	bf1e      	ittt	ne
 80003a4:	2100      	movne	r1, #0
 80003a6:	2000      	movne	r0, #0
 80003a8:	bd30      	popne	{r4, r5, pc}
 80003aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003ae:	d105      	bne.n	80003bc <__adddf3+0x230>
 80003b0:	0040      	lsls	r0, r0, #1
 80003b2:	4149      	adcs	r1, r1
 80003b4:	bf28      	it	cs
 80003b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ba:	bd30      	pop	{r4, r5, pc}
 80003bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c0:	bf3c      	itt	cc
 80003c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003c6:	bd30      	popcc	{r4, r5, pc}
 80003c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003d4:	f04f 0000 	mov.w	r0, #0
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf1a      	itte	ne
 80003e0:	4619      	movne	r1, r3
 80003e2:	4610      	movne	r0, r2
 80003e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e8:	bf1c      	itt	ne
 80003ea:	460b      	movne	r3, r1
 80003ec:	4602      	movne	r2, r0
 80003ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003f2:	bf06      	itte	eq
 80003f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f8:	ea91 0f03 	teqeq	r1, r3
 80003fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	bf00      	nop

08000404 <__aeabi_ui2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f04f 0500 	mov.w	r5, #0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e750      	b.n	80002c4 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_i2d>:
 8000424:	f090 0f00 	teq	r0, #0
 8000428:	bf04      	itt	eq
 800042a:	2100      	moveq	r1, #0
 800042c:	4770      	bxeq	lr
 800042e:	b530      	push	{r4, r5, lr}
 8000430:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000434:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000438:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800043c:	bf48      	it	mi
 800043e:	4240      	negmi	r0, r0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e73e      	b.n	80002c4 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_f2d>:
 8000448:	0042      	lsls	r2, r0, #1
 800044a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000452:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000456:	bf1f      	itttt	ne
 8000458:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800045c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000460:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000464:	4770      	bxne	lr
 8000466:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800046a:	bf08      	it	eq
 800046c:	4770      	bxeq	lr
 800046e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000472:	bf04      	itt	eq
 8000474:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000488:	e71c      	b.n	80002c4 <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_ul2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f04f 0500 	mov.w	r5, #0
 800049a:	e00a      	b.n	80004b2 <__aeabi_l2d+0x16>

0800049c <__aeabi_l2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004aa:	d502      	bpl.n	80004b2 <__aeabi_l2d+0x16>
 80004ac:	4240      	negs	r0, r0
 80004ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004be:	f43f aed8 	beq.w	8000272 <__adddf3+0xe6>
 80004c2:	f04f 0203 	mov.w	r2, #3
 80004c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ca:	bf18      	it	ne
 80004cc:	3203      	addne	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	fa00 fc03 	lsl.w	ip, r0, r3
 80004e2:	fa20 f002 	lsr.w	r0, r0, r2
 80004e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ea:	ea40 000e 	orr.w	r0, r0, lr
 80004ee:	fa21 f102 	lsr.w	r1, r1, r2
 80004f2:	4414      	add	r4, r2
 80004f4:	e6bd      	b.n	8000272 <__adddf3+0xe6>
 80004f6:	bf00      	nop

080004f8 <__aeabi_d2uiz>:
 80004f8:	004a      	lsls	r2, r1, #1
 80004fa:	d211      	bcs.n	8000520 <__aeabi_d2uiz+0x28>
 80004fc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000500:	d211      	bcs.n	8000526 <__aeabi_d2uiz+0x2e>
 8000502:	d50d      	bpl.n	8000520 <__aeabi_d2uiz+0x28>
 8000504:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000508:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800050c:	d40e      	bmi.n	800052c <__aeabi_d2uiz+0x34>
 800050e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000512:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000516:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800051a:	fa23 f002 	lsr.w	r0, r3, r2
 800051e:	4770      	bx	lr
 8000520:	f04f 0000 	mov.w	r0, #0
 8000524:	4770      	bx	lr
 8000526:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800052a:	d102      	bne.n	8000532 <__aeabi_d2uiz+0x3a>
 800052c:	f04f 30ff 	mov.w	r0, #4294967295
 8000530:	4770      	bx	lr
 8000532:	f04f 0000 	mov.w	r0, #0
 8000536:	4770      	bx	lr

08000538 <USART1_Inits>:
{
	for(uint32_t i = 0 ; i < 500000/2 ; i ++);
}


void USART1_Inits(void){
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0

	USART1Handle.pUSARTx = USART1;
 800053c:	4b0d      	ldr	r3, [pc, #52]	; (8000574 <USART1_Inits+0x3c>)
 800053e:	4a0e      	ldr	r2, [pc, #56]	; (8000578 <USART1_Inits+0x40>)
 8000540:	601a      	str	r2, [r3, #0]
	USART1Handle.USART_Config.USART_BaudRate = USART_BAUDRATE_115200;
 8000542:	4b0c      	ldr	r3, [pc, #48]	; (8000574 <USART1_Inits+0x3c>)
 8000544:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000548:	609a      	str	r2, [r3, #8]
	USART1Handle.USART_Config.USART_HwFlowCtl = USART_HWFLOWCTL_NONE;
 800054a:	4b0a      	ldr	r3, [pc, #40]	; (8000574 <USART1_Inits+0x3c>)
 800054c:	2200      	movs	r2, #0
 800054e:	73da      	strb	r2, [r3, #15]
	USART1Handle.USART_Config.USART_Mode = USART_MODE_TX;
 8000550:	4b08      	ldr	r3, [pc, #32]	; (8000574 <USART1_Inits+0x3c>)
 8000552:	2200      	movs	r2, #0
 8000554:	711a      	strb	r2, [r3, #4]
	USART1Handle.USART_Config.USART_Parity = USART_PARITY_DISABLE;
 8000556:	4b07      	ldr	r3, [pc, #28]	; (8000574 <USART1_Inits+0x3c>)
 8000558:	2200      	movs	r2, #0
 800055a:	739a      	strb	r2, [r3, #14]
	USART1Handle.USART_Config.USART_StopBits = USART_STOPBITS_1;
 800055c:	4b05      	ldr	r3, [pc, #20]	; (8000574 <USART1_Inits+0x3c>)
 800055e:	2200      	movs	r2, #0
 8000560:	731a      	strb	r2, [r3, #12]
	USART1Handle.USART_Config.USART_WordLength = USART_WORD_8BITS;
 8000562:	4b04      	ldr	r3, [pc, #16]	; (8000574 <USART1_Inits+0x3c>)
 8000564:	2200      	movs	r2, #0
 8000566:	735a      	strb	r2, [r3, #13]

	USART_Init(&USART1Handle);
 8000568:	4802      	ldr	r0, [pc, #8]	; (8000574 <USART1_Inits+0x3c>)
 800056a:	f000 fc53 	bl	8000e14 <USART_Init>
}
 800056e:	bf00      	nop
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	20000418 	.word	0x20000418
 8000578:	40013800 	.word	0x40013800

0800057c <USART1_GPIOInit>:

void USART1_GPIOInit(void){
 800057c:	b580      	push	{r7, lr}
 800057e:	b084      	sub	sp, #16
 8000580:	af00      	add	r7, sp, #0

	GPIO_Handle_t USART1Pin;

	USART1Pin.pGPIOx = GPIOA;
 8000582:	4b0c      	ldr	r3, [pc, #48]	; (80005b4 <USART1_GPIOInit+0x38>)
 8000584:	607b      	str	r3, [r7, #4]

	USART1Pin.GPIO_PinConfig.GPIO_OutputMode = GPIO_MODE_ALT_PP;
 8000586:	2302      	movs	r3, #2
 8000588:	72bb      	strb	r3, [r7, #10]
	USART1Pin.GPIO_PinConfig.GPIO_InputMode = GPIO_INPUT_PUPD;
 800058a:	2302      	movs	r3, #2
 800058c:	72fb      	strb	r3, [r7, #11]
	USART1Pin.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUTPUT_SPEED_50M;
 800058e:	2303      	movs	r3, #3
 8000590:	723b      	strb	r3, [r7, #8]

	//USART Tx
	USART1Pin.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_9;
 8000592:	2309      	movs	r3, #9
 8000594:	727b      	strb	r3, [r7, #9]
	GPIO_Init(&USART1Pin);
 8000596:	1d3b      	adds	r3, r7, #4
 8000598:	4618      	mov	r0, r3
 800059a:	f000 f8f1 	bl	8000780 <GPIO_Init>

	//USART Rx
	USART1Pin.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_10;
 800059e:	230a      	movs	r3, #10
 80005a0:	727b      	strb	r3, [r7, #9]
	GPIO_Init(&USART1Pin);
 80005a2:	1d3b      	adds	r3, r7, #4
 80005a4:	4618      	mov	r0, r3
 80005a6:	f000 f8eb 	bl	8000780 <GPIO_Init>

}
 80005aa:	bf00      	nop
 80005ac:	3710      	adds	r7, #16
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	40010800 	.word	0x40010800

080005b8 <main>:
int main(void){
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0

	USART1_GPIOInit();
 80005bc:	f7ff ffde 	bl	800057c <USART1_GPIOInit>

	    USART1_Inits();
 80005c0:	f7ff ffba 	bl	8000538 <USART1_Inits>

	    USART_PeripheralControl(USART1, ENABLE);
 80005c4:	2101      	movs	r1, #1
 80005c6:	4806      	ldr	r0, [pc, #24]	; (80005e0 <main+0x28>)
 80005c8:	f000 fc9f 	bl	8000f0a <USART_PeripheralControl>

	    while(1)
	    {

			USART_SendData(&USART1Handle, (uint8_t*)message, strlen(message));
 80005cc:	4805      	ldr	r0, [pc, #20]	; (80005e4 <main+0x2c>)
 80005ce:	f7ff fdcf 	bl	8000170 <strlen>
 80005d2:	4603      	mov	r3, r0
 80005d4:	461a      	mov	r2, r3
 80005d6:	4903      	ldr	r1, [pc, #12]	; (80005e4 <main+0x2c>)
 80005d8:	4803      	ldr	r0, [pc, #12]	; (80005e8 <main+0x30>)
 80005da:	f000 fcc4 	bl	8000f66 <USART_SendData>
 80005de:	e7f5      	b.n	80005cc <main+0x14>
 80005e0:	40013800 	.word	0x40013800
 80005e4:	20000000 	.word	0x20000000
 80005e8:	20000418 	.word	0x20000418

080005ec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005ec:	480d      	ldr	r0, [pc, #52]	; (8000624 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005ee:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005f0:	480d      	ldr	r0, [pc, #52]	; (8000628 <LoopForever+0x6>)
  ldr r1, =_edata
 80005f2:	490e      	ldr	r1, [pc, #56]	; (800062c <LoopForever+0xa>)
  ldr r2, =_sidata
 80005f4:	4a0e      	ldr	r2, [pc, #56]	; (8000630 <LoopForever+0xe>)
  movs r3, #0
 80005f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005f8:	e002      	b.n	8000600 <LoopCopyDataInit>

080005fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005fe:	3304      	adds	r3, #4

08000600 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000600:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000602:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000604:	d3f9      	bcc.n	80005fa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000606:	4a0b      	ldr	r2, [pc, #44]	; (8000634 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000608:	4c0b      	ldr	r4, [pc, #44]	; (8000638 <LoopForever+0x16>)
  movs r3, #0
 800060a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800060c:	e001      	b.n	8000612 <LoopFillZerobss>

0800060e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800060e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000610:	3204      	adds	r2, #4

08000612 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000612:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000614:	d3fb      	bcc.n	800060e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000616:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 800061a:	f000 fd07 	bl	800102c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800061e:	f7ff ffcb 	bl	80005b8 <main>

08000622 <LoopForever>:

LoopForever:
    b LoopForever
 8000622:	e7fe      	b.n	8000622 <LoopForever>
  ldr   r0, =_estack
 8000624:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000628:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800062c:	200003fc 	.word	0x200003fc
  ldr r2, =_sidata
 8000630:	08001094 	.word	0x08001094
  ldr r2, =_sbss
 8000634:	200003fc 	.word	0x200003fc
  ldr r4, =_ebss
 8000638:	20000440 	.word	0x20000440

0800063c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800063c:	e7fe      	b.n	800063c <ADC1_2_IRQHandler>
	...

08000640 <GPIO_PClockControl>:

#include <gpio_driver.h>


void GPIO_PClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000640:	b480      	push	{r7}
 8000642:	b083      	sub	sp, #12
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
 8000648:	460b      	mov	r3, r1
 800064a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 800064c:	78fb      	ldrb	r3, [r7, #3]
 800064e:	2b01      	cmp	r3, #1
 8000650:	d141      	bne.n	80006d6 <GPIO_PClockControl+0x96>
	{
		if(pGPIOx == GPIOA)
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	4a44      	ldr	r2, [pc, #272]	; (8000768 <GPIO_PClockControl+0x128>)
 8000656:	4293      	cmp	r3, r2
 8000658:	d106      	bne.n	8000668 <GPIO_PClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 800065a:	4b44      	ldr	r3, [pc, #272]	; (800076c <GPIO_PClockControl+0x12c>)
 800065c:	699b      	ldr	r3, [r3, #24]
 800065e:	4a43      	ldr	r2, [pc, #268]	; (800076c <GPIO_PClockControl+0x12c>)
 8000660:	f043 0304 	orr.w	r3, r3, #4
 8000664:	6193      	str	r3, [r2, #24]
		{
			GPIOE_PCLK_DI();
		}

		}
	}
 8000666:	e07a      	b.n	800075e <GPIO_PClockControl+0x11e>
		}else if(pGPIOx == GPIOB)
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	4a41      	ldr	r2, [pc, #260]	; (8000770 <GPIO_PClockControl+0x130>)
 800066c:	4293      	cmp	r3, r2
 800066e:	d106      	bne.n	800067e <GPIO_PClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000670:	4b3e      	ldr	r3, [pc, #248]	; (800076c <GPIO_PClockControl+0x12c>)
 8000672:	699b      	ldr	r3, [r3, #24]
 8000674:	4a3d      	ldr	r2, [pc, #244]	; (800076c <GPIO_PClockControl+0x12c>)
 8000676:	f043 0308 	orr.w	r3, r3, #8
 800067a:	6193      	str	r3, [r2, #24]
	}
 800067c:	e06f      	b.n	800075e <GPIO_PClockControl+0x11e>
		else if(pGPIOx == GPIOB)
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	4a3b      	ldr	r2, [pc, #236]	; (8000770 <GPIO_PClockControl+0x130>)
 8000682:	4293      	cmp	r3, r2
 8000684:	d106      	bne.n	8000694 <GPIO_PClockControl+0x54>
			GPIOB_PCLK_EN();
 8000686:	4b39      	ldr	r3, [pc, #228]	; (800076c <GPIO_PClockControl+0x12c>)
 8000688:	699b      	ldr	r3, [r3, #24]
 800068a:	4a38      	ldr	r2, [pc, #224]	; (800076c <GPIO_PClockControl+0x12c>)
 800068c:	f043 0308 	orr.w	r3, r3, #8
 8000690:	6193      	str	r3, [r2, #24]
	}
 8000692:	e064      	b.n	800075e <GPIO_PClockControl+0x11e>
		else if(pGPIOx == GPIOC)
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	4a37      	ldr	r2, [pc, #220]	; (8000774 <GPIO_PClockControl+0x134>)
 8000698:	4293      	cmp	r3, r2
 800069a:	d106      	bne.n	80006aa <GPIO_PClockControl+0x6a>
			GPIOC_PCLK_EN();
 800069c:	4b33      	ldr	r3, [pc, #204]	; (800076c <GPIO_PClockControl+0x12c>)
 800069e:	699b      	ldr	r3, [r3, #24]
 80006a0:	4a32      	ldr	r2, [pc, #200]	; (800076c <GPIO_PClockControl+0x12c>)
 80006a2:	f043 0310 	orr.w	r3, r3, #16
 80006a6:	6193      	str	r3, [r2, #24]
	}
 80006a8:	e059      	b.n	800075e <GPIO_PClockControl+0x11e>
		else if(pGPIOx == GPIOD)
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	4a32      	ldr	r2, [pc, #200]	; (8000778 <GPIO_PClockControl+0x138>)
 80006ae:	4293      	cmp	r3, r2
 80006b0:	d106      	bne.n	80006c0 <GPIO_PClockControl+0x80>
			GPIOD_PCLK_EN();
 80006b2:	4b2e      	ldr	r3, [pc, #184]	; (800076c <GPIO_PClockControl+0x12c>)
 80006b4:	699b      	ldr	r3, [r3, #24]
 80006b6:	4a2d      	ldr	r2, [pc, #180]	; (800076c <GPIO_PClockControl+0x12c>)
 80006b8:	f043 0320 	orr.w	r3, r3, #32
 80006bc:	6193      	str	r3, [r2, #24]
	}
 80006be:	e04e      	b.n	800075e <GPIO_PClockControl+0x11e>
		else if(pGPIOx == GPIOE)
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	4a2e      	ldr	r2, [pc, #184]	; (800077c <GPIO_PClockControl+0x13c>)
 80006c4:	4293      	cmp	r3, r2
 80006c6:	d14a      	bne.n	800075e <GPIO_PClockControl+0x11e>
			GPIOE_PCLK_EN();
 80006c8:	4b28      	ldr	r3, [pc, #160]	; (800076c <GPIO_PClockControl+0x12c>)
 80006ca:	699b      	ldr	r3, [r3, #24]
 80006cc:	4a27      	ldr	r2, [pc, #156]	; (800076c <GPIO_PClockControl+0x12c>)
 80006ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006d2:	6193      	str	r3, [r2, #24]
	}
 80006d4:	e043      	b.n	800075e <GPIO_PClockControl+0x11e>
		else if (EnorDi == DISABLE)
 80006d6:	78fb      	ldrb	r3, [r7, #3]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d140      	bne.n	800075e <GPIO_PClockControl+0x11e>
		if(pGPIOx == GPIOA)
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	4a22      	ldr	r2, [pc, #136]	; (8000768 <GPIO_PClockControl+0x128>)
 80006e0:	4293      	cmp	r3, r2
 80006e2:	d106      	bne.n	80006f2 <GPIO_PClockControl+0xb2>
			GPIOA_PCLK_DI();
 80006e4:	4b21      	ldr	r3, [pc, #132]	; (800076c <GPIO_PClockControl+0x12c>)
 80006e6:	699b      	ldr	r3, [r3, #24]
 80006e8:	4a20      	ldr	r2, [pc, #128]	; (800076c <GPIO_PClockControl+0x12c>)
 80006ea:	f023 0304 	bic.w	r3, r3, #4
 80006ee:	6193      	str	r3, [r2, #24]
	}
 80006f0:	e035      	b.n	800075e <GPIO_PClockControl+0x11e>
		}else if(pGPIOx == GPIOB)
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	4a1e      	ldr	r2, [pc, #120]	; (8000770 <GPIO_PClockControl+0x130>)
 80006f6:	4293      	cmp	r3, r2
 80006f8:	d106      	bne.n	8000708 <GPIO_PClockControl+0xc8>
			GPIOB_PCLK_DI();
 80006fa:	4b1c      	ldr	r3, [pc, #112]	; (800076c <GPIO_PClockControl+0x12c>)
 80006fc:	699b      	ldr	r3, [r3, #24]
 80006fe:	4a1b      	ldr	r2, [pc, #108]	; (800076c <GPIO_PClockControl+0x12c>)
 8000700:	f023 0308 	bic.w	r3, r3, #8
 8000704:	6193      	str	r3, [r2, #24]
	}
 8000706:	e02a      	b.n	800075e <GPIO_PClockControl+0x11e>
		else if(pGPIOx == GPIOB)
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	4a19      	ldr	r2, [pc, #100]	; (8000770 <GPIO_PClockControl+0x130>)
 800070c:	4293      	cmp	r3, r2
 800070e:	d106      	bne.n	800071e <GPIO_PClockControl+0xde>
			GPIOB_PCLK_DI();
 8000710:	4b16      	ldr	r3, [pc, #88]	; (800076c <GPIO_PClockControl+0x12c>)
 8000712:	699b      	ldr	r3, [r3, #24]
 8000714:	4a15      	ldr	r2, [pc, #84]	; (800076c <GPIO_PClockControl+0x12c>)
 8000716:	f023 0308 	bic.w	r3, r3, #8
 800071a:	6193      	str	r3, [r2, #24]
	}
 800071c:	e01f      	b.n	800075e <GPIO_PClockControl+0x11e>
		else if(pGPIOx == GPIOC)
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	4a14      	ldr	r2, [pc, #80]	; (8000774 <GPIO_PClockControl+0x134>)
 8000722:	4293      	cmp	r3, r2
 8000724:	d106      	bne.n	8000734 <GPIO_PClockControl+0xf4>
			GPIOC_PCLK_DI();
 8000726:	4b11      	ldr	r3, [pc, #68]	; (800076c <GPIO_PClockControl+0x12c>)
 8000728:	699b      	ldr	r3, [r3, #24]
 800072a:	4a10      	ldr	r2, [pc, #64]	; (800076c <GPIO_PClockControl+0x12c>)
 800072c:	f023 0310 	bic.w	r3, r3, #16
 8000730:	6193      	str	r3, [r2, #24]
	}
 8000732:	e014      	b.n	800075e <GPIO_PClockControl+0x11e>
		else if(pGPIOx == GPIOD)
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	4a10      	ldr	r2, [pc, #64]	; (8000778 <GPIO_PClockControl+0x138>)
 8000738:	4293      	cmp	r3, r2
 800073a:	d106      	bne.n	800074a <GPIO_PClockControl+0x10a>
			GPIOD_PCLK_DI();
 800073c:	4b0b      	ldr	r3, [pc, #44]	; (800076c <GPIO_PClockControl+0x12c>)
 800073e:	699b      	ldr	r3, [r3, #24]
 8000740:	4a0a      	ldr	r2, [pc, #40]	; (800076c <GPIO_PClockControl+0x12c>)
 8000742:	f023 0320 	bic.w	r3, r3, #32
 8000746:	6193      	str	r3, [r2, #24]
	}
 8000748:	e009      	b.n	800075e <GPIO_PClockControl+0x11e>
		else if(pGPIOx == GPIOE)
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	4a0b      	ldr	r2, [pc, #44]	; (800077c <GPIO_PClockControl+0x13c>)
 800074e:	4293      	cmp	r3, r2
 8000750:	d105      	bne.n	800075e <GPIO_PClockControl+0x11e>
			GPIOE_PCLK_DI();
 8000752:	4b06      	ldr	r3, [pc, #24]	; (800076c <GPIO_PClockControl+0x12c>)
 8000754:	699b      	ldr	r3, [r3, #24]
 8000756:	4a05      	ldr	r2, [pc, #20]	; (800076c <GPIO_PClockControl+0x12c>)
 8000758:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800075c:	6193      	str	r3, [r2, #24]
	}
 800075e:	bf00      	nop
 8000760:	370c      	adds	r7, #12
 8000762:	46bd      	mov	sp, r7
 8000764:	bc80      	pop	{r7}
 8000766:	4770      	bx	lr
 8000768:	40010800 	.word	0x40010800
 800076c:	40021000 	.word	0x40021000
 8000770:	40010c00 	.word	0x40010c00
 8000774:	40011000 	.word	0x40011000
 8000778:	40011400 	.word	0x40011400
 800077c:	40011800 	.word	0x40011800

08000780 <GPIO_Init>:

 /*
  * Initializing and De-Initializing
  */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b084      	sub	sp, #16
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
	GPIO_PClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	2101      	movs	r1, #1
 800078e:	4618      	mov	r0, r3
 8000790:	f7ff ff56 	bl	8000640 <GPIO_PClockControl>

	uint8_t temp1 = 0;
 8000794:	2300      	movs	r3, #0
 8000796:	73fb      	strb	r3, [r7, #15]
	uint8_t temp2 = 0;
 8000798:	2300      	movs	r3, #0
 800079a:	73bb      	strb	r3, [r7, #14]


	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_OUTPUT_SPEED_50M){
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	791b      	ldrb	r3, [r3, #4]
 80007a0:	2b03      	cmp	r3, #3
 80007a2:	d848      	bhi.n	8000836 <GPIO_Init+0xb6>

		// the non interrupt mode

		//Configure Input Mode
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	795b      	ldrb	r3, [r3, #5]
 80007a8:	08db      	lsrs	r3, r3, #3
 80007aa:	73fb      	strb	r3, [r7, #15]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	795b      	ldrb	r3, [r3, #5]
 80007b0:	f003 0307 	and.w	r3, r3, #7
 80007b4:	73bb      	strb	r3, [r7, #14]
		pGPIOHandle->pGPIOx->CR[temp1] &= ~(3 << (4 * temp2)); //clear MODEx
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	7bfa      	ldrb	r2, [r7, #15]
 80007bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80007c0:	7bbb      	ldrb	r3, [r7, #14]
 80007c2:	009b      	lsls	r3, r3, #2
 80007c4:	2203      	movs	r2, #3
 80007c6:	fa02 f303 	lsl.w	r3, r2, r3
 80007ca:	43db      	mvns	r3, r3
 80007cc:	4618      	mov	r0, r3
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	7bfa      	ldrb	r2, [r7, #15]
 80007d4:	4001      	ands	r1, r0
 80007d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->CR[temp1] &= ~(3 << (4 * (temp2 >> 2))); //clear CNFx
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	7bfa      	ldrb	r2, [r7, #15]
 80007e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80007e4:	7bbb      	ldrb	r3, [r7, #14]
 80007e6:	089b      	lsrs	r3, r3, #2
 80007e8:	b2db      	uxtb	r3, r3
 80007ea:	009b      	lsls	r3, r3, #2
 80007ec:	2203      	movs	r2, #3
 80007ee:	fa02 f303 	lsl.w	r3, r2, r3
 80007f2:	43db      	mvns	r3, r3
 80007f4:	4618      	mov	r0, r3
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	7bfa      	ldrb	r2, [r7, #15]
 80007fc:	4001      	ands	r1, r0
 80007fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->CR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_InputMode << (4 * (temp2 >> 2) ));
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	7bfa      	ldrb	r2, [r7, #15]
 8000808:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	79db      	ldrb	r3, [r3, #7]
 8000810:	461a      	mov	r2, r3
 8000812:	7bbb      	ldrb	r3, [r7, #14]
 8000814:	089b      	lsrs	r3, r3, #2
 8000816:	b2db      	uxtb	r3, r3
 8000818:	009b      	lsls	r3, r3, #2
 800081a:	fa02 f303 	lsl.w	r3, r2, r3
 800081e:	4618      	mov	r0, r3
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	7bfa      	ldrb	r2, [r7, #15]
 8000826:	4301      	orrs	r1, r0
 8000828:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

		temp1 = 0;
 800082c:	2300      	movs	r3, #0
 800082e:	73fb      	strb	r3, [r7, #15]
		temp2 = 0;
 8000830:	2300      	movs	r3, #0
 8000832:	73bb      	strb	r3, [r7, #14]
 8000834:	e0af      	b.n	8000996 <GPIO_Init+0x216>
	}

	else
	{	//interrupt mode

		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	791b      	ldrb	r3, [r3, #4]
 800083a:	2b04      	cmp	r3, #4
 800083c:	d117      	bne.n	800086e <GPIO_Init+0xee>

			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800083e:	4ba3      	ldr	r3, [pc, #652]	; (8000acc <GPIO_Init+0x34c>)
 8000840:	68db      	ldr	r3, [r3, #12]
 8000842:	687a      	ldr	r2, [r7, #4]
 8000844:	7952      	ldrb	r2, [r2, #5]
 8000846:	4611      	mov	r1, r2
 8000848:	2201      	movs	r2, #1
 800084a:	408a      	lsls	r2, r1
 800084c:	4611      	mov	r1, r2
 800084e:	4a9f      	ldr	r2, [pc, #636]	; (8000acc <GPIO_Init+0x34c>)
 8000850:	430b      	orrs	r3, r1
 8000852:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000854:	4b9d      	ldr	r3, [pc, #628]	; (8000acc <GPIO_Init+0x34c>)
 8000856:	689b      	ldr	r3, [r3, #8]
 8000858:	687a      	ldr	r2, [r7, #4]
 800085a:	7952      	ldrb	r2, [r2, #5]
 800085c:	4611      	mov	r1, r2
 800085e:	2201      	movs	r2, #1
 8000860:	408a      	lsls	r2, r1
 8000862:	43d2      	mvns	r2, r2
 8000864:	4611      	mov	r1, r2
 8000866:	4a99      	ldr	r2, [pc, #612]	; (8000acc <GPIO_Init+0x34c>)
 8000868:	400b      	ands	r3, r1
 800086a:	6093      	str	r3, [r2, #8]
 800086c:	e035      	b.n	80008da <GPIO_Init+0x15a>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	791b      	ldrb	r3, [r3, #4]
 8000872:	2b05      	cmp	r3, #5
 8000874:	d117      	bne.n	80008a6 <GPIO_Init+0x126>

			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000876:	4b95      	ldr	r3, [pc, #596]	; (8000acc <GPIO_Init+0x34c>)
 8000878:	689b      	ldr	r3, [r3, #8]
 800087a:	687a      	ldr	r2, [r7, #4]
 800087c:	7952      	ldrb	r2, [r2, #5]
 800087e:	4611      	mov	r1, r2
 8000880:	2201      	movs	r2, #1
 8000882:	408a      	lsls	r2, r1
 8000884:	4611      	mov	r1, r2
 8000886:	4a91      	ldr	r2, [pc, #580]	; (8000acc <GPIO_Init+0x34c>)
 8000888:	430b      	orrs	r3, r1
 800088a:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800088c:	4b8f      	ldr	r3, [pc, #572]	; (8000acc <GPIO_Init+0x34c>)
 800088e:	68db      	ldr	r3, [r3, #12]
 8000890:	687a      	ldr	r2, [r7, #4]
 8000892:	7952      	ldrb	r2, [r2, #5]
 8000894:	4611      	mov	r1, r2
 8000896:	2201      	movs	r2, #1
 8000898:	408a      	lsls	r2, r1
 800089a:	43d2      	mvns	r2, r2
 800089c:	4611      	mov	r1, r2
 800089e:	4a8b      	ldr	r2, [pc, #556]	; (8000acc <GPIO_Init+0x34c>)
 80008a0:	400b      	ands	r3, r1
 80008a2:	60d3      	str	r3, [r2, #12]
 80008a4:	e019      	b.n	80008da <GPIO_Init+0x15a>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT){
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	791b      	ldrb	r3, [r3, #4]
 80008aa:	2b06      	cmp	r3, #6
 80008ac:	d115      	bne.n	80008da <GPIO_Init+0x15a>

			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80008ae:	4b87      	ldr	r3, [pc, #540]	; (8000acc <GPIO_Init+0x34c>)
 80008b0:	689b      	ldr	r3, [r3, #8]
 80008b2:	687a      	ldr	r2, [r7, #4]
 80008b4:	7952      	ldrb	r2, [r2, #5]
 80008b6:	4611      	mov	r1, r2
 80008b8:	2201      	movs	r2, #1
 80008ba:	408a      	lsls	r2, r1
 80008bc:	4611      	mov	r1, r2
 80008be:	4a83      	ldr	r2, [pc, #524]	; (8000acc <GPIO_Init+0x34c>)
 80008c0:	430b      	orrs	r3, r1
 80008c2:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80008c4:	4b81      	ldr	r3, [pc, #516]	; (8000acc <GPIO_Init+0x34c>)
 80008c6:	68db      	ldr	r3, [r3, #12]
 80008c8:	687a      	ldr	r2, [r7, #4]
 80008ca:	7952      	ldrb	r2, [r2, #5]
 80008cc:	4611      	mov	r1, r2
 80008ce:	2201      	movs	r2, #1
 80008d0:	408a      	lsls	r2, r1
 80008d2:	4611      	mov	r1, r2
 80008d4:	4a7d      	ldr	r2, [pc, #500]	; (8000acc <GPIO_Init+0x34c>)
 80008d6:	430b      	orrs	r3, r1
 80008d8:	60d3      	str	r3, [r2, #12]
		}

		// Configure the GPIO selection in AFIO_EXTICR
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	795b      	ldrb	r3, [r3, #5]
 80008de:	089b      	lsrs	r3, r3, #2
 80008e0:	73fb      	strb	r3, [r7, #15]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	795b      	ldrb	r3, [r3, #5]
 80008e6:	f003 0303 	and.w	r3, r3, #3
 80008ea:	73bb      	strb	r3, [r7, #14]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a77      	ldr	r2, [pc, #476]	; (8000ad0 <GPIO_Init+0x350>)
 80008f2:	4293      	cmp	r3, r2
 80008f4:	d02b      	beq.n	800094e <GPIO_Init+0x1ce>
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	4a76      	ldr	r2, [pc, #472]	; (8000ad4 <GPIO_Init+0x354>)
 80008fc:	4293      	cmp	r3, r2
 80008fe:	d024      	beq.n	800094a <GPIO_Init+0x1ca>
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a74      	ldr	r2, [pc, #464]	; (8000ad8 <GPIO_Init+0x358>)
 8000906:	4293      	cmp	r3, r2
 8000908:	d01d      	beq.n	8000946 <GPIO_Init+0x1c6>
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	4a73      	ldr	r2, [pc, #460]	; (8000adc <GPIO_Init+0x35c>)
 8000910:	4293      	cmp	r3, r2
 8000912:	d016      	beq.n	8000942 <GPIO_Init+0x1c2>
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a71      	ldr	r2, [pc, #452]	; (8000ae0 <GPIO_Init+0x360>)
 800091a:	4293      	cmp	r3, r2
 800091c:	d00f      	beq.n	800093e <GPIO_Init+0x1be>
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	4a70      	ldr	r2, [pc, #448]	; (8000ae4 <GPIO_Init+0x364>)
 8000924:	4293      	cmp	r3, r2
 8000926:	d008      	beq.n	800093a <GPIO_Init+0x1ba>
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a6e      	ldr	r2, [pc, #440]	; (8000ae8 <GPIO_Init+0x368>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d101      	bne.n	8000936 <GPIO_Init+0x1b6>
 8000932:	2306      	movs	r3, #6
 8000934:	e00c      	b.n	8000950 <GPIO_Init+0x1d0>
 8000936:	2300      	movs	r3, #0
 8000938:	e00a      	b.n	8000950 <GPIO_Init+0x1d0>
 800093a:	2305      	movs	r3, #5
 800093c:	e008      	b.n	8000950 <GPIO_Init+0x1d0>
 800093e:	2304      	movs	r3, #4
 8000940:	e006      	b.n	8000950 <GPIO_Init+0x1d0>
 8000942:	2303      	movs	r3, #3
 8000944:	e004      	b.n	8000950 <GPIO_Init+0x1d0>
 8000946:	2302      	movs	r3, #2
 8000948:	e002      	b.n	8000950 <GPIO_Init+0x1d0>
 800094a:	2301      	movs	r3, #1
 800094c:	e000      	b.n	8000950 <GPIO_Init+0x1d0>
 800094e:	2300      	movs	r3, #0
 8000950:	737b      	strb	r3, [r7, #13]
		AFIO_PCLK_EN();
 8000952:	4b66      	ldr	r3, [pc, #408]	; (8000aec <GPIO_Init+0x36c>)
 8000954:	699b      	ldr	r3, [r3, #24]
 8000956:	4a65      	ldr	r2, [pc, #404]	; (8000aec <GPIO_Init+0x36c>)
 8000958:	f043 0301 	orr.w	r3, r3, #1
 800095c:	6193      	str	r3, [r2, #24]
		AFIO->EXTICR[temp1] |= portcode << (temp2 * 4);
 800095e:	4a64      	ldr	r2, [pc, #400]	; (8000af0 <GPIO_Init+0x370>)
 8000960:	7bfb      	ldrb	r3, [r7, #15]
 8000962:	3302      	adds	r3, #2
 8000964:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000968:	7b79      	ldrb	r1, [r7, #13]
 800096a:	7bbb      	ldrb	r3, [r7, #14]
 800096c:	009b      	lsls	r3, r3, #2
 800096e:	fa01 f303 	lsl.w	r3, r1, r3
 8000972:	4618      	mov	r0, r3
 8000974:	495e      	ldr	r1, [pc, #376]	; (8000af0 <GPIO_Init+0x370>)
 8000976:	7bfb      	ldrb	r3, [r7, #15]
 8000978:	4302      	orrs	r2, r0
 800097a:	3302      	adds	r3, #2
 800097c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		// enable EXTI Interrupt using IMR Register
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000980:	4b52      	ldr	r3, [pc, #328]	; (8000acc <GPIO_Init+0x34c>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	687a      	ldr	r2, [r7, #4]
 8000986:	7952      	ldrb	r2, [r2, #5]
 8000988:	4611      	mov	r1, r2
 800098a:	2201      	movs	r2, #1
 800098c:	408a      	lsls	r2, r1
 800098e:	4611      	mov	r1, r2
 8000990:	4a4e      	ldr	r2, [pc, #312]	; (8000acc <GPIO_Init+0x34c>)
 8000992:	430b      	orrs	r3, r1
 8000994:	6013      	str	r3, [r2, #0]
	}

		temp1 = 0;
 8000996:	2300      	movs	r3, #0
 8000998:	73fb      	strb	r3, [r7, #15]
		temp2 = 0;
 800099a:	2300      	movs	r3, #0
 800099c:	73bb      	strb	r3, [r7, #14]

		//Configure Output Mode
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	795b      	ldrb	r3, [r3, #5]
 80009a2:	08db      	lsrs	r3, r3, #3
 80009a4:	73fb      	strb	r3, [r7, #15]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	795b      	ldrb	r3, [r3, #5]
 80009aa:	f003 0307 	and.w	r3, r3, #7
 80009ae:	73bb      	strb	r3, [r7, #14]
		pGPIOHandle->pGPIOx->CR[temp1] &= ~(3 << (4 * (temp2 >> 2)));
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	7bfa      	ldrb	r2, [r7, #15]
 80009b6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80009ba:	7bbb      	ldrb	r3, [r7, #14]
 80009bc:	089b      	lsrs	r3, r3, #2
 80009be:	b2db      	uxtb	r3, r3
 80009c0:	009b      	lsls	r3, r3, #2
 80009c2:	2203      	movs	r2, #3
 80009c4:	fa02 f303 	lsl.w	r3, r2, r3
 80009c8:	43db      	mvns	r3, r3
 80009ca:	4618      	mov	r0, r3
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	7bfa      	ldrb	r2, [r7, #15]
 80009d2:	4001      	ands	r1, r0
 80009d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->CR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_OutputMode << (4 * (temp2 >> 2)));
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	7bfa      	ldrb	r2, [r7, #15]
 80009de:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	799b      	ldrb	r3, [r3, #6]
 80009e6:	461a      	mov	r2, r3
 80009e8:	7bbb      	ldrb	r3, [r7, #14]
 80009ea:	089b      	lsrs	r3, r3, #2
 80009ec:	b2db      	uxtb	r3, r3
 80009ee:	009b      	lsls	r3, r3, #2
 80009f0:	fa02 f303 	lsl.w	r3, r2, r3
 80009f4:	4618      	mov	r0, r3
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	7bfa      	ldrb	r2, [r7, #15]
 80009fc:	4301      	orrs	r1, r0
 80009fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

		temp1 = 0;
 8000a02:	2300      	movs	r3, #0
 8000a04:	73fb      	strb	r3, [r7, #15]
		temp2 = 0;
 8000a06:	2300      	movs	r3, #0
 8000a08:	73bb      	strb	r3, [r7, #14]

		//Configure Speed
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	795b      	ldrb	r3, [r3, #5]
 8000a0e:	08db      	lsrs	r3, r3, #3
 8000a10:	73fb      	strb	r3, [r7, #15]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	795b      	ldrb	r3, [r3, #5]
 8000a16:	f003 0307 	and.w	r3, r3, #7
 8000a1a:	73bb      	strb	r3, [r7, #14]
		pGPIOHandle->pGPIOx->CR[temp1] &= ~(3 << (4 * temp2));
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	7bfa      	ldrb	r2, [r7, #15]
 8000a22:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000a26:	7bbb      	ldrb	r3, [r7, #14]
 8000a28:	009b      	lsls	r3, r3, #2
 8000a2a:	2203      	movs	r2, #3
 8000a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a30:	43db      	mvns	r3, r3
 8000a32:	4618      	mov	r0, r3
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	7bfa      	ldrb	r2, [r7, #15]
 8000a3a:	4001      	ands	r1, r0
 8000a3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->CR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (4 * temp2));
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	7bfa      	ldrb	r2, [r7, #15]
 8000a46:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	791b      	ldrb	r3, [r3, #4]
 8000a4e:	461a      	mov	r2, r3
 8000a50:	7bbb      	ldrb	r3, [r7, #14]
 8000a52:	009b      	lsls	r3, r3, #2
 8000a54:	fa02 f303 	lsl.w	r3, r2, r3
 8000a58:	4618      	mov	r0, r3
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	7bfa      	ldrb	r2, [r7, #15]
 8000a60:	4301      	orrs	r1, r0
 8000a62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

		if(pGPIOHandle->GPIO_PinConfig.GPIO_OutputMode >= GPIO_MODE_ALT_PP )
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	799b      	ldrb	r3, [r3, #6]
 8000a6a:	2b01      	cmp	r3, #1
 8000a6c:	d952      	bls.n	8000b14 <GPIO_Init+0x394>
		{
			AFIO->EVCR |= ( (GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx) << 4) ); //select port
 8000a6e:	4b20      	ldr	r3, [pc, #128]	; (8000af0 <GPIO_Init+0x370>)
 8000a70:	681a      	ldr	r2, [r3, #0]
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	4916      	ldr	r1, [pc, #88]	; (8000ad0 <GPIO_Init+0x350>)
 8000a78:	428b      	cmp	r3, r1
 8000a7a:	d03f      	beq.n	8000afc <GPIO_Init+0x37c>
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4914      	ldr	r1, [pc, #80]	; (8000ad4 <GPIO_Init+0x354>)
 8000a82:	428b      	cmp	r3, r1
 8000a84:	d038      	beq.n	8000af8 <GPIO_Init+0x378>
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	4913      	ldr	r1, [pc, #76]	; (8000ad8 <GPIO_Init+0x358>)
 8000a8c:	428b      	cmp	r3, r1
 8000a8e:	d031      	beq.n	8000af4 <GPIO_Init+0x374>
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4911      	ldr	r1, [pc, #68]	; (8000adc <GPIO_Init+0x35c>)
 8000a96:	428b      	cmp	r3, r1
 8000a98:	d016      	beq.n	8000ac8 <GPIO_Init+0x348>
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	4910      	ldr	r1, [pc, #64]	; (8000ae0 <GPIO_Init+0x360>)
 8000aa0:	428b      	cmp	r3, r1
 8000aa2:	d00f      	beq.n	8000ac4 <GPIO_Init+0x344>
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	490e      	ldr	r1, [pc, #56]	; (8000ae4 <GPIO_Init+0x364>)
 8000aaa:	428b      	cmp	r3, r1
 8000aac:	d008      	beq.n	8000ac0 <GPIO_Init+0x340>
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	490d      	ldr	r1, [pc, #52]	; (8000ae8 <GPIO_Init+0x368>)
 8000ab4:	428b      	cmp	r3, r1
 8000ab6:	d101      	bne.n	8000abc <GPIO_Init+0x33c>
 8000ab8:	2360      	movs	r3, #96	; 0x60
 8000aba:	e020      	b.n	8000afe <GPIO_Init+0x37e>
 8000abc:	2300      	movs	r3, #0
 8000abe:	e01e      	b.n	8000afe <GPIO_Init+0x37e>
 8000ac0:	2350      	movs	r3, #80	; 0x50
 8000ac2:	e01c      	b.n	8000afe <GPIO_Init+0x37e>
 8000ac4:	2340      	movs	r3, #64	; 0x40
 8000ac6:	e01a      	b.n	8000afe <GPIO_Init+0x37e>
 8000ac8:	2330      	movs	r3, #48	; 0x30
 8000aca:	e018      	b.n	8000afe <GPIO_Init+0x37e>
 8000acc:	40010400 	.word	0x40010400
 8000ad0:	40010800 	.word	0x40010800
 8000ad4:	40010c00 	.word	0x40010c00
 8000ad8:	40011000 	.word	0x40011000
 8000adc:	40011400 	.word	0x40011400
 8000ae0:	40011800 	.word	0x40011800
 8000ae4:	40011c00 	.word	0x40011c00
 8000ae8:	40012000 	.word	0x40012000
 8000aec:	40021000 	.word	0x40021000
 8000af0:	40010000 	.word	0x40010000
 8000af4:	2320      	movs	r3, #32
 8000af6:	e002      	b.n	8000afe <GPIO_Init+0x37e>
 8000af8:	2310      	movs	r3, #16
 8000afa:	e000      	b.n	8000afe <GPIO_Init+0x37e>
 8000afc:	2300      	movs	r3, #0
 8000afe:	4907      	ldr	r1, [pc, #28]	; (8000b1c <GPIO_Init+0x39c>)
 8000b00:	4313      	orrs	r3, r2
 8000b02:	600b      	str	r3, [r1, #0]

			AFIO->EVCR |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber << 0); //select pin
 8000b04:	4b05      	ldr	r3, [pc, #20]	; (8000b1c <GPIO_Init+0x39c>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	687a      	ldr	r2, [r7, #4]
 8000b0a:	7952      	ldrb	r2, [r2, #5]
 8000b0c:	4611      	mov	r1, r2
 8000b0e:	4a03      	ldr	r2, [pc, #12]	; (8000b1c <GPIO_Init+0x39c>)
 8000b10:	430b      	orrs	r3, r1
 8000b12:	6013      	str	r3, [r2, #0]
		}

}
 8000b14:	bf00      	nop
 8000b16:	3710      	adds	r7, #16
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	40010000 	.word	0x40010000

08000b20 <RCC_PCLK1_GetValue>:
uint8_t APB_Prescaler[4] = {2,4,8,16};

//uint32_t RCC_PLLOutputClock(void){}

uint32_t RCC_PCLK1_GetValue(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b085      	sub	sp, #20
 8000b24:	af00      	add	r7, sp, #0
	uint32_t PCLK1,SYSCLK;
	uint8_t temp=0,clk=0,AHB,APB1;
 8000b26:	2300      	movs	r3, #0
 8000b28:	727b      	strb	r3, [r7, #9]
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	723b      	strb	r3, [r7, #8]
	clk = ((RCC->CFGR >> RCC_CFGR_SWS) & 0x3);
 8000b2e:	4b22      	ldr	r3, [pc, #136]	; (8000bb8 <RCC_PCLK1_GetValue+0x98>)
 8000b30:	685b      	ldr	r3, [r3, #4]
 8000b32:	089b      	lsrs	r3, r3, #2
 8000b34:	b2db      	uxtb	r3, r3
 8000b36:	f003 0303 	and.w	r3, r3, #3
 8000b3a:	723b      	strb	r3, [r7, #8]

	if (clk == 0){
 8000b3c:	7a3b      	ldrb	r3, [r7, #8]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d102      	bne.n	8000b48 <RCC_PCLK1_GetValue+0x28>
		SYSCLK = 8000000; // HSI 8MHz
 8000b42:	4b1e      	ldr	r3, [pc, #120]	; (8000bbc <RCC_PCLK1_GetValue+0x9c>)
 8000b44:	60fb      	str	r3, [r7, #12]
 8000b46:	e004      	b.n	8000b52 <RCC_PCLK1_GetValue+0x32>
	}
	else if(clk == 1){
 8000b48:	7a3b      	ldrb	r3, [r7, #8]
 8000b4a:	2b01      	cmp	r3, #1
 8000b4c:	d101      	bne.n	8000b52 <RCC_PCLK1_GetValue+0x32>
		SYSCLK = 4000000;  // HSE 4MHz
 8000b4e:	4b1c      	ldr	r3, [pc, #112]	; (8000bc0 <RCC_PCLK1_GetValue+0xa0>)
 8000b50:	60fb      	str	r3, [r7, #12]
	}
	else if(clk == 2){
		//SYSCLK == RCC_PLLOutputClock();
	}

	temp = ((RCC->CFGR >> RCC_CFGR_HPRE) & 0xF);
 8000b52:	4b19      	ldr	r3, [pc, #100]	; (8000bb8 <RCC_PCLK1_GetValue+0x98>)
 8000b54:	685b      	ldr	r3, [r3, #4]
 8000b56:	091b      	lsrs	r3, r3, #4
 8000b58:	b2db      	uxtb	r3, r3
 8000b5a:	f003 030f 	and.w	r3, r3, #15
 8000b5e:	727b      	strb	r3, [r7, #9]
	if(temp < 8){
 8000b60:	7a7b      	ldrb	r3, [r7, #9]
 8000b62:	2b07      	cmp	r3, #7
 8000b64:	d802      	bhi.n	8000b6c <RCC_PCLK1_GetValue+0x4c>
		AHB=1;
 8000b66:	2301      	movs	r3, #1
 8000b68:	72fb      	strb	r3, [r7, #11]
 8000b6a:	e005      	b.n	8000b78 <RCC_PCLK1_GetValue+0x58>
	}
	else{
		AHB = AHB_Prescaler[temp - 8];
 8000b6c:	7a7b      	ldrb	r3, [r7, #9]
 8000b6e:	3b08      	subs	r3, #8
 8000b70:	4a14      	ldr	r2, [pc, #80]	; (8000bc4 <RCC_PCLK1_GetValue+0xa4>)
 8000b72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b76:	72fb      	strb	r3, [r7, #11]
	}

	temp = ((RCC->CFGR >> RCC_CFGR_PPRE1) & 0x7);
 8000b78:	4b0f      	ldr	r3, [pc, #60]	; (8000bb8 <RCC_PCLK1_GetValue+0x98>)
 8000b7a:	685b      	ldr	r3, [r3, #4]
 8000b7c:	0a1b      	lsrs	r3, r3, #8
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	f003 0307 	and.w	r3, r3, #7
 8000b84:	727b      	strb	r3, [r7, #9]
	if(temp < 4){
 8000b86:	7a7b      	ldrb	r3, [r7, #9]
 8000b88:	2b03      	cmp	r3, #3
 8000b8a:	d802      	bhi.n	8000b92 <RCC_PCLK1_GetValue+0x72>
			APB1=1;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	72bb      	strb	r3, [r7, #10]
 8000b90:	e004      	b.n	8000b9c <RCC_PCLK1_GetValue+0x7c>
	}
	else{
			APB1 = APB_Prescaler[temp - 4];
 8000b92:	7a7b      	ldrb	r3, [r7, #9]
 8000b94:	3b04      	subs	r3, #4
 8000b96:	4a0c      	ldr	r2, [pc, #48]	; (8000bc8 <RCC_PCLK1_GetValue+0xa8>)
 8000b98:	5cd3      	ldrb	r3, [r2, r3]
 8000b9a:	72bb      	strb	r3, [r7, #10]
	}

	PCLK1 = (SYSCLK / AHB) / APB1;
 8000b9c:	7afb      	ldrb	r3, [r7, #11]
 8000b9e:	68fa      	ldr	r2, [r7, #12]
 8000ba0:	fbb2 f2f3 	udiv	r2, r2, r3
 8000ba4:	7abb      	ldrb	r3, [r7, #10]
 8000ba6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000baa:	607b      	str	r3, [r7, #4]

	return PCLK1;
 8000bac:	687b      	ldr	r3, [r7, #4]
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3714      	adds	r7, #20
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bc80      	pop	{r7}
 8000bb6:	4770      	bx	lr
 8000bb8:	40021000 	.word	0x40021000
 8000bbc:	007a1200 	.word	0x007a1200
 8000bc0:	003d0900 	.word	0x003d0900
 8000bc4:	200003e8 	.word	0x200003e8
 8000bc8:	200003f8 	.word	0x200003f8

08000bcc <RCC_PCLK2_GetValue>:

uint32_t RCC_PCLK2_GetValue(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b085      	sub	sp, #20
 8000bd0:	af00      	add	r7, sp, #0
	uint32_t PCLK2,SYSCLK=0;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	60fb      	str	r3, [r7, #12]
	uint8_t temp=0,clk=0,AHB,APB2;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	727b      	strb	r3, [r7, #9]
 8000bda:	2300      	movs	r3, #0
 8000bdc:	723b      	strb	r3, [r7, #8]
	clk = ((RCC->CFGR >> RCC_CFGR_SWS) & 0x3);
 8000bde:	4b22      	ldr	r3, [pc, #136]	; (8000c68 <RCC_PCLK2_GetValue+0x9c>)
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	089b      	lsrs	r3, r3, #2
 8000be4:	b2db      	uxtb	r3, r3
 8000be6:	f003 0303 	and.w	r3, r3, #3
 8000bea:	723b      	strb	r3, [r7, #8]

	if (clk == 0){
 8000bec:	7a3b      	ldrb	r3, [r7, #8]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d102      	bne.n	8000bf8 <RCC_PCLK2_GetValue+0x2c>
		SYSCLK = 8000000; // HSI 8MHz
 8000bf2:	4b1e      	ldr	r3, [pc, #120]	; (8000c6c <RCC_PCLK2_GetValue+0xa0>)
 8000bf4:	60fb      	str	r3, [r7, #12]
 8000bf6:	e004      	b.n	8000c02 <RCC_PCLK2_GetValue+0x36>
	}
	else if(clk == 1){
 8000bf8:	7a3b      	ldrb	r3, [r7, #8]
 8000bfa:	2b01      	cmp	r3, #1
 8000bfc:	d101      	bne.n	8000c02 <RCC_PCLK2_GetValue+0x36>
		SYSCLK = 4000000;  // HSE 4MHz
 8000bfe:	4b1c      	ldr	r3, [pc, #112]	; (8000c70 <RCC_PCLK2_GetValue+0xa4>)
 8000c00:	60fb      	str	r3, [r7, #12]
	}
	else if(clk == 2){
		//SYSCLK == RCC_PLLOutputClock();
	}

	temp = ((RCC->CFGR >> RCC_CFGR_HPRE) & 0xF);
 8000c02:	4b19      	ldr	r3, [pc, #100]	; (8000c68 <RCC_PCLK2_GetValue+0x9c>)
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	091b      	lsrs	r3, r3, #4
 8000c08:	b2db      	uxtb	r3, r3
 8000c0a:	f003 030f 	and.w	r3, r3, #15
 8000c0e:	727b      	strb	r3, [r7, #9]
	if(temp < 8){
 8000c10:	7a7b      	ldrb	r3, [r7, #9]
 8000c12:	2b07      	cmp	r3, #7
 8000c14:	d802      	bhi.n	8000c1c <RCC_PCLK2_GetValue+0x50>
		AHB=1;
 8000c16:	2301      	movs	r3, #1
 8000c18:	72fb      	strb	r3, [r7, #11]
 8000c1a:	e005      	b.n	8000c28 <RCC_PCLK2_GetValue+0x5c>
	}
	else{
		AHB = AHB_Prescaler[temp - 8];
 8000c1c:	7a7b      	ldrb	r3, [r7, #9]
 8000c1e:	3b08      	subs	r3, #8
 8000c20:	4a14      	ldr	r2, [pc, #80]	; (8000c74 <RCC_PCLK2_GetValue+0xa8>)
 8000c22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c26:	72fb      	strb	r3, [r7, #11]
	}

	temp = ((RCC->CFGR >> RCC_CFGR_PPRE2) & 0x7);
 8000c28:	4b0f      	ldr	r3, [pc, #60]	; (8000c68 <RCC_PCLK2_GetValue+0x9c>)
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	0adb      	lsrs	r3, r3, #11
 8000c2e:	b2db      	uxtb	r3, r3
 8000c30:	f003 0307 	and.w	r3, r3, #7
 8000c34:	727b      	strb	r3, [r7, #9]
	if(temp < 4){
 8000c36:	7a7b      	ldrb	r3, [r7, #9]
 8000c38:	2b03      	cmp	r3, #3
 8000c3a:	d802      	bhi.n	8000c42 <RCC_PCLK2_GetValue+0x76>
			APB2=1;
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	72bb      	strb	r3, [r7, #10]
 8000c40:	e004      	b.n	8000c4c <RCC_PCLK2_GetValue+0x80>
	}
	else{
			APB2 = APB_Prescaler[temp - 4];
 8000c42:	7a7b      	ldrb	r3, [r7, #9]
 8000c44:	3b04      	subs	r3, #4
 8000c46:	4a0c      	ldr	r2, [pc, #48]	; (8000c78 <RCC_PCLK2_GetValue+0xac>)
 8000c48:	5cd3      	ldrb	r3, [r2, r3]
 8000c4a:	72bb      	strb	r3, [r7, #10]
	}

	PCLK2 = (SYSCLK / AHB) / APB2;
 8000c4c:	7afb      	ldrb	r3, [r7, #11]
 8000c4e:	68fa      	ldr	r2, [r7, #12]
 8000c50:	fbb2 f2f3 	udiv	r2, r2, r3
 8000c54:	7abb      	ldrb	r3, [r7, #10]
 8000c56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c5a:	607b      	str	r3, [r7, #4]

	return PCLK2;
 8000c5c:	687b      	ldr	r3, [r7, #4]
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3714      	adds	r7, #20
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bc80      	pop	{r7}
 8000c66:	4770      	bx	lr
 8000c68:	40021000 	.word	0x40021000
 8000c6c:	007a1200 	.word	0x007a1200
 8000c70:	003d0900 	.word	0x003d0900
 8000c74:	200003e8 	.word	0x200003e8
 8000c78:	200003f8 	.word	0x200003f8

08000c7c <USART_PClockControl>:
static void USART_TXEHandleIT(USART_Handle_t *pUSARTHandle);
static void USART_RXNEHandleIT(USART_Handle_t *pUSARTHandle);


void USART_PClockControl(USART_RegDef_t *pUSARTx, uint8_t EnorDi)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
 8000c84:	460b      	mov	r3, r1
 8000c86:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000c88:	78fb      	ldrb	r3, [r7, #3]
 8000c8a:	2b01      	cmp	r3, #1
 8000c8c:	d136      	bne.n	8000cfc <USART_PClockControl+0x80>
{
	if(pUSARTx == USART1)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	4a39      	ldr	r2, [pc, #228]	; (8000d78 <USART_PClockControl+0xfc>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d106      	bne.n	8000ca4 <USART_PClockControl+0x28>
	{
		USART1_PCLK_EN();
 8000c96:	4b39      	ldr	r3, [pc, #228]	; (8000d7c <USART_PClockControl+0x100>)
 8000c98:	699b      	ldr	r3, [r3, #24]
 8000c9a:	4a38      	ldr	r2, [pc, #224]	; (8000d7c <USART_PClockControl+0x100>)
 8000c9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ca0:	6193      	str	r3, [r2, #24]
	else if(pUSARTx == UART5)
		{
			UART5_PCLK_DI();
		}
	}
}
 8000ca2:	e064      	b.n	8000d6e <USART_PClockControl+0xf2>
	}else if(pUSARTx == USART2)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	4a36      	ldr	r2, [pc, #216]	; (8000d80 <USART_PClockControl+0x104>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d106      	bne.n	8000cba <USART_PClockControl+0x3e>
		USART2_PCLK_EN();
 8000cac:	4b33      	ldr	r3, [pc, #204]	; (8000d7c <USART_PClockControl+0x100>)
 8000cae:	69db      	ldr	r3, [r3, #28]
 8000cb0:	4a32      	ldr	r2, [pc, #200]	; (8000d7c <USART_PClockControl+0x100>)
 8000cb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cb6:	61d3      	str	r3, [r2, #28]
}
 8000cb8:	e059      	b.n	8000d6e <USART_PClockControl+0xf2>
	else if(pUSARTx == USART3)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	4a31      	ldr	r2, [pc, #196]	; (8000d84 <USART_PClockControl+0x108>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d106      	bne.n	8000cd0 <USART_PClockControl+0x54>
		USART3_PCLK_EN();
 8000cc2:	4b2e      	ldr	r3, [pc, #184]	; (8000d7c <USART_PClockControl+0x100>)
 8000cc4:	69db      	ldr	r3, [r3, #28]
 8000cc6:	4a2d      	ldr	r2, [pc, #180]	; (8000d7c <USART_PClockControl+0x100>)
 8000cc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ccc:	61d3      	str	r3, [r2, #28]
}
 8000cce:	e04e      	b.n	8000d6e <USART_PClockControl+0xf2>
	else if(pUSARTx == UART4)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	4a2d      	ldr	r2, [pc, #180]	; (8000d88 <USART_PClockControl+0x10c>)
 8000cd4:	4293      	cmp	r3, r2
 8000cd6:	d106      	bne.n	8000ce6 <USART_PClockControl+0x6a>
		UART4_PCLK_EN();
 8000cd8:	4b28      	ldr	r3, [pc, #160]	; (8000d7c <USART_PClockControl+0x100>)
 8000cda:	69db      	ldr	r3, [r3, #28]
 8000cdc:	4a27      	ldr	r2, [pc, #156]	; (8000d7c <USART_PClockControl+0x100>)
 8000cde:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000ce2:	61d3      	str	r3, [r2, #28]
}
 8000ce4:	e043      	b.n	8000d6e <USART_PClockControl+0xf2>
	else if(pUSARTx == UART5)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	4a28      	ldr	r2, [pc, #160]	; (8000d8c <USART_PClockControl+0x110>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d13f      	bne.n	8000d6e <USART_PClockControl+0xf2>
			UART5_PCLK_EN();
 8000cee:	4b23      	ldr	r3, [pc, #140]	; (8000d7c <USART_PClockControl+0x100>)
 8000cf0:	69db      	ldr	r3, [r3, #28]
 8000cf2:	4a22      	ldr	r2, [pc, #136]	; (8000d7c <USART_PClockControl+0x100>)
 8000cf4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000cf8:	61d3      	str	r3, [r2, #28]
}
 8000cfa:	e038      	b.n	8000d6e <USART_PClockControl+0xf2>
	else if (EnorDi == DISABLE)
 8000cfc:	78fb      	ldrb	r3, [r7, #3]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d135      	bne.n	8000d6e <USART_PClockControl+0xf2>
	if(pUSARTx == USART1)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	4a1c      	ldr	r2, [pc, #112]	; (8000d78 <USART_PClockControl+0xfc>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d106      	bne.n	8000d18 <USART_PClockControl+0x9c>
		USART1_PCLK_DI();
 8000d0a:	4b1c      	ldr	r3, [pc, #112]	; (8000d7c <USART_PClockControl+0x100>)
 8000d0c:	699b      	ldr	r3, [r3, #24]
 8000d0e:	4a1b      	ldr	r2, [pc, #108]	; (8000d7c <USART_PClockControl+0x100>)
 8000d10:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000d14:	6193      	str	r3, [r2, #24]
}
 8000d16:	e02a      	b.n	8000d6e <USART_PClockControl+0xf2>
	}else if(pUSARTx == USART2)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	4a19      	ldr	r2, [pc, #100]	; (8000d80 <USART_PClockControl+0x104>)
 8000d1c:	4293      	cmp	r3, r2
 8000d1e:	d106      	bne.n	8000d2e <USART_PClockControl+0xb2>
		USART2_PCLK_DI();
 8000d20:	4b16      	ldr	r3, [pc, #88]	; (8000d7c <USART_PClockControl+0x100>)
 8000d22:	69db      	ldr	r3, [r3, #28]
 8000d24:	4a15      	ldr	r2, [pc, #84]	; (8000d7c <USART_PClockControl+0x100>)
 8000d26:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000d2a:	61d3      	str	r3, [r2, #28]
}
 8000d2c:	e01f      	b.n	8000d6e <USART_PClockControl+0xf2>
	else if(pUSARTx == USART3)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	4a14      	ldr	r2, [pc, #80]	; (8000d84 <USART_PClockControl+0x108>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d106      	bne.n	8000d44 <USART_PClockControl+0xc8>
			USART3_PCLK_DI();
 8000d36:	4b11      	ldr	r3, [pc, #68]	; (8000d7c <USART_PClockControl+0x100>)
 8000d38:	69db      	ldr	r3, [r3, #28]
 8000d3a:	4a10      	ldr	r2, [pc, #64]	; (8000d7c <USART_PClockControl+0x100>)
 8000d3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d40:	61d3      	str	r3, [r2, #28]
}
 8000d42:	e014      	b.n	8000d6e <USART_PClockControl+0xf2>
	else if(pUSARTx == UART4)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	4a10      	ldr	r2, [pc, #64]	; (8000d88 <USART_PClockControl+0x10c>)
 8000d48:	4293      	cmp	r3, r2
 8000d4a:	d106      	bne.n	8000d5a <USART_PClockControl+0xde>
			UART4_PCLK_DI();
 8000d4c:	4b0b      	ldr	r3, [pc, #44]	; (8000d7c <USART_PClockControl+0x100>)
 8000d4e:	69db      	ldr	r3, [r3, #28]
 8000d50:	4a0a      	ldr	r2, [pc, #40]	; (8000d7c <USART_PClockControl+0x100>)
 8000d52:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8000d56:	61d3      	str	r3, [r2, #28]
}
 8000d58:	e009      	b.n	8000d6e <USART_PClockControl+0xf2>
	else if(pUSARTx == UART5)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4a0b      	ldr	r2, [pc, #44]	; (8000d8c <USART_PClockControl+0x110>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d105      	bne.n	8000d6e <USART_PClockControl+0xf2>
			UART5_PCLK_DI();
 8000d62:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <USART_PClockControl+0x100>)
 8000d64:	69db      	ldr	r3, [r3, #28]
 8000d66:	4a05      	ldr	r2, [pc, #20]	; (8000d7c <USART_PClockControl+0x100>)
 8000d68:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000d6c:	61d3      	str	r3, [r2, #28]
}
 8000d6e:	bf00      	nop
 8000d70:	370c      	adds	r7, #12
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bc80      	pop	{r7}
 8000d76:	4770      	bx	lr
 8000d78:	40013800 	.word	0x40013800
 8000d7c:	40021000 	.word	0x40021000
 8000d80:	40004400 	.word	0x40004400
 8000d84:	40004800 	.word	0x40004800
 8000d88:	40004c00 	.word	0x40004c00
 8000d8c:	40005000 	.word	0x40005000

08000d90 <USART_SetBaudRate>:

void USART_SetBaudRate(USART_RegDef_t *pUSARTx, uint32_t BaudRate)
{
 8000d90:	b590      	push	{r4, r7, lr}
 8000d92:	b089      	sub	sp, #36	; 0x24
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
 8000d98:	6039      	str	r1, [r7, #0]
	//define APB clock mantissa and fraction values
	uint32_t PCLKx, Mpart, Fpart;
	uint32_t USARTDIV, fraction;

	if(pUSARTx == USART2 || pUSARTx == USART3){
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4a1b      	ldr	r2, [pc, #108]	; (8000e0c <USART_SetBaudRate+0x7c>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d003      	beq.n	8000daa <USART_SetBaudRate+0x1a>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4a1a      	ldr	r2, [pc, #104]	; (8000e10 <USART_SetBaudRate+0x80>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d103      	bne.n	8000db2 <USART_SetBaudRate+0x22>
		//USART2 and USART3 APB1 bus
		PCLKx = RCC_PCLK1_GetValue();
 8000daa:	f7ff feb9 	bl	8000b20 <RCC_PCLK1_GetValue>
 8000dae:	61f8      	str	r0, [r7, #28]
 8000db0:	e002      	b.n	8000db8 <USART_SetBaudRate+0x28>
	}
	else{
		//USART1 APB2 bus
		PCLKx = RCC_PCLK2_GetValue();
 8000db2:	f7ff ff0b 	bl	8000bcc <RCC_PCLK2_GetValue>
 8000db6:	61f8      	str	r0, [r7, #28]
	}

	// over sampling by 16 (default)
	USARTDIV = (PCLKx) / (16 * BaudRate);  // BAUD = FCLK / (16*USARTDIV)
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	011b      	lsls	r3, r3, #4
 8000dbc:	69fa      	ldr	r2, [r7, #28]
 8000dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dc2:	61bb      	str	r3, [r7, #24]

	Mpart = USARTDIV;
 8000dc4:	69bb      	ldr	r3, [r7, #24]
 8000dc6:	617b      	str	r3, [r7, #20]
	pUSARTx->BRR |= Mpart << 4;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	689a      	ldr	r2, [r3, #8]
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	011b      	lsls	r3, r3, #4
 8000dd0:	431a      	orrs	r2, r3
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	609a      	str	r2, [r3, #8]

	fraction = 16*(USARTDIV - Mpart);
 8000dd6:	69ba      	ldr	r2, [r7, #24]
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	1ad3      	subs	r3, r2, r3
 8000ddc:	011b      	lsls	r3, r3, #4
 8000dde:	613b      	str	r3, [r7, #16]
	//The nearest real number of DIV_Fractıon
	Fpart = round(fraction);
 8000de0:	6938      	ldr	r0, [r7, #16]
 8000de2:	f7ff fb0f 	bl	8000404 <__aeabi_ui2d>
 8000de6:	4603      	mov	r3, r0
 8000de8:	460c      	mov	r4, r1
 8000dea:	4618      	mov	r0, r3
 8000dec:	4621      	mov	r1, r4
 8000dee:	f7ff fb83 	bl	80004f8 <__aeabi_d2uiz>
 8000df2:	4603      	mov	r3, r0
 8000df4:	60fb      	str	r3, [r7, #12]
	pUSARTx->BRR |= Fpart;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	689a      	ldr	r2, [r3, #8]
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	431a      	orrs	r2, r3
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	609a      	str	r2, [r3, #8]
}
 8000e02:	bf00      	nop
 8000e04:	3724      	adds	r7, #36	; 0x24
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd90      	pop	{r4, r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	40004400 	.word	0x40004400
 8000e10:	40004800 	.word	0x40004800

08000e14 <USART_Init>:

void USART_Init(USART_Handle_t *pUSARTHandle)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
	// Enable the clock for USARTx peripheral
	USART_PClockControl(pUSARTHandle->pUSARTx, ENABLE);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	2101      	movs	r1, #1
 8000e22:	4618      	mov	r0, r3
 8000e24:	f7ff ff2a 	bl	8000c7c <USART_PClockControl>

	//Enable USART Tx and Rx Mode
	if(pUSARTHandle->USART_Config.USART_Mode == USART_MODE_TX){
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	791b      	ldrb	r3, [r3, #4]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d108      	bne.n	8000e42 <USART_Init+0x2e>
		//transmitter enable
		pUSARTHandle->pUSARTx->CR1 |= (1 << USART_CR1_TE);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	68da      	ldr	r2, [r3, #12]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f042 0208 	orr.w	r2, r2, #8
 8000e3e:	60da      	str	r2, [r3, #12]
 8000e40:	e018      	b.n	8000e74 <USART_Init+0x60>
	}
	else if(pUSARTHandle->USART_Config.USART_Mode == USART_MODE_RX){
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	791b      	ldrb	r3, [r3, #4]
 8000e46:	2b01      	cmp	r3, #1
 8000e48:	d108      	bne.n	8000e5c <USART_Init+0x48>
		//receiver enable
		pUSARTHandle->pUSARTx->CR1 |= (1 << USART_CR1_RE);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	68da      	ldr	r2, [r3, #12]
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f042 0204 	orr.w	r2, r2, #4
 8000e58:	60da      	str	r2, [r3, #12]
 8000e5a:	e00b      	b.n	8000e74 <USART_Init+0x60>
	}
	else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_TXRX){
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	791b      	ldrb	r3, [r3, #4]
 8000e60:	2b02      	cmp	r3, #2
 8000e62:	d107      	bne.n	8000e74 <USART_Init+0x60>
		pUSARTHandle->pUSARTx->CR1 |= ((1 << USART_CR1_TE) | (1 << USART_CR1_RE));
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	68da      	ldr	r2, [r3, #12]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f042 020c 	orr.w	r2, r2, #12
 8000e72:	60da      	str	r2, [r3, #12]
	}

	//Determines the word length
	pUSARTHandle->pUSARTx->CR1 |= pUSARTHandle->USART_Config.USART_WordLength << USART_CR1_M;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	68da      	ldr	r2, [r3, #12]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	7b5b      	ldrb	r3, [r3, #13]
 8000e7e:	031b      	lsls	r3, r3, #12
 8000e80:	4619      	mov	r1, r3
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	430a      	orrs	r2, r1
 8000e88:	60da      	str	r2, [r3, #12]

	//Parity control and selection
	if(pUSARTHandle->USART_Config.USART_Parity == USART_PARITY_EVEN){
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	7b9b      	ldrb	r3, [r3, #14]
 8000e8e:	2b01      	cmp	r3, #1
 8000e90:	d110      	bne.n	8000eb4 <USART_Init+0xa0>
		//Parity control enabled
		pUSARTHandle->pUSARTx->CR1 |= (1 << USART_CR1_PCE);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	68da      	ldr	r2, [r3, #12]
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000ea0:	60da      	str	r2, [r3, #12]
		//even parity
		pUSARTHandle->pUSARTx->CR1 &= ~(1 << USART_CR1_PS);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	68da      	ldr	r2, [r3, #12]
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000eb0:	60da      	str	r2, [r3, #12]
 8000eb2:	e013      	b.n	8000edc <USART_Init+0xc8>
	}
	else if(pUSARTHandle->USART_Config.USART_Parity == USART_PARITY_ODD){
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	7b9b      	ldrb	r3, [r3, #14]
 8000eb8:	2b02      	cmp	r3, #2
 8000eba:	d10f      	bne.n	8000edc <USART_Init+0xc8>
		//Parity control enabled
		pUSARTHandle->pUSARTx->CR1 |= (1 << USART_CR1_PCE);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	68da      	ldr	r2, [r3, #12]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000eca:	60da      	str	r2, [r3, #12]
		//odd parity
		pUSARTHandle->pUSARTx->CR1 |= (1 << USART_CR1_PS);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	68da      	ldr	r2, [r3, #12]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000eda:	60da      	str	r2, [r3, #12]
	}

	//These bits are used for programming the stop bits
	pUSARTHandle->pUSARTx->CR2 |= pUSARTHandle->USART_Config.USART_StopBits << USART_CR2_STOP;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	691a      	ldr	r2, [r3, #16]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	7b1b      	ldrb	r3, [r3, #12]
 8000ee6:	031b      	lsls	r3, r3, #12
 8000ee8:	4619      	mov	r1, r3
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	430a      	orrs	r2, r1
 8000ef0:	611a      	str	r2, [r3, #16]

	//Configure the baud rate
	USART_SetBaudRate(pUSARTHandle->pUSARTx, pUSARTHandle->USART_Config.USART_BaudRate);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681a      	ldr	r2, [r3, #0]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	689b      	ldr	r3, [r3, #8]
 8000efa:	4619      	mov	r1, r3
 8000efc:	4610      	mov	r0, r2
 8000efe:	f7ff ff47 	bl	8000d90 <USART_SetBaudRate>

}
 8000f02:	bf00      	nop
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}

08000f0a <USART_PeripheralControl>:
	}
}


void USART_PeripheralControl(USART_RegDef_t *pUSARTx, uint8_t EnOrDi)
{
 8000f0a:	b480      	push	{r7}
 8000f0c:	b083      	sub	sp, #12
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	6078      	str	r0, [r7, #4]
 8000f12:	460b      	mov	r3, r1
 8000f14:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE){
 8000f16:	78fb      	ldrb	r3, [r7, #3]
 8000f18:	2b01      	cmp	r3, #1
 8000f1a:	d106      	bne.n	8000f2a <USART_PeripheralControl+0x20>
		pUSARTx->CR1 |= (1<<USART_CR1_UE);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	68db      	ldr	r3, [r3, #12]
 8000f20:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	60da      	str	r2, [r3, #12]
	}
	else{
		pUSARTx->CR1 &= ~(1<<USART_CR1_UE);
	}
}
 8000f28:	e005      	b.n	8000f36 <USART_PeripheralControl+0x2c>
		pUSARTx->CR1 &= ~(1<<USART_CR1_UE);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	68db      	ldr	r3, [r3, #12]
 8000f2e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	60da      	str	r2, [r3, #12]
}
 8000f36:	bf00      	nop
 8000f38:	370c      	adds	r7, #12
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bc80      	pop	{r7}
 8000f3e:	4770      	bx	lr

08000f40 <USART_GetFlagStatus>:


uint8_t USART_GetFlagStatus(USART_RegDef_t *pUSARTx , uint32_t FlagName)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	6039      	str	r1, [r7, #0]
	if(pUSARTx->SR & FlagName){
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	4013      	ands	r3, r2
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <USART_GetFlagStatus+0x1a>
		return FLAG_SET;
 8000f56:	2301      	movs	r3, #1
 8000f58:	e000      	b.n	8000f5c <USART_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8000f5a:	2300      	movs	r3, #0
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	370c      	adds	r7, #12
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bc80      	pop	{r7}
 8000f64:	4770      	bx	lr

08000f66 <USART_SendData>:



void USART_SendData(USART_Handle_t *pUSARTHandle, uint8_t *pTxbuffer, uint32_t Len)
{
 8000f66:	b580      	push	{r7, lr}
 8000f68:	b086      	sub	sp, #24
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	60f8      	str	r0, [r7, #12]
 8000f6e:	60b9      	str	r1, [r7, #8]
 8000f70:	607a      	str	r2, [r7, #4]
	for(uint32_t i=0; i<Len; i++){
 8000f72:	2300      	movs	r3, #0
 8000f74:	617b      	str	r3, [r7, #20]
 8000f76:	e051      	b.n	800101c <USART_SendData+0xb6>

	//wait until TXE bit is set by hardware when the content of the TDR register has been transferred into the shift register
	while(! USART_GetFlagStatus(pUSARTHandle->pUSARTx, USART_FLAG_TXE));
 8000f78:	bf00      	nop
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	2180      	movs	r1, #128	; 0x80
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff ffdd 	bl	8000f40 <USART_GetFlagStatus>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d0f6      	beq.n	8000f7a <USART_SendData+0x14>

	//check USART word length 8bit or 9bit
	if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORD_9BITS){
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	7b5b      	ldrb	r3, [r3, #13]
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d119      	bne.n	8000fc8 <USART_SendData+0x62>

		//9bit load the DR with 2 byte
		pUSARTHandle->pUSARTx->DR |= ( *(uint16_t*)pTxbuffer & (uint16_t)0x01FF);
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	6859      	ldr	r1, [r3, #4]
 8000f9a:	68bb      	ldr	r3, [r7, #8]
 8000f9c:	881b      	ldrh	r3, [r3, #0]
 8000f9e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	430a      	orrs	r2, r1
 8000fa8:	605a      	str	r2, [r3, #4]

		//check parity bit
		if(pUSARTHandle->USART_Config.USART_Parity == USART_PARITY_DISABLE){
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	7b9b      	ldrb	r3, [r3, #14]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d106      	bne.n	8000fc0 <USART_SendData+0x5a>
			//no parity 9bits of user data will be sent
			pTxbuffer++;
 8000fb2:	68bb      	ldr	r3, [r7, #8]
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	60bb      	str	r3, [r7, #8]
			pTxbuffer++;
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	3301      	adds	r3, #1
 8000fbc:	60bb      	str	r3, [r7, #8]
 8000fbe:	e020      	b.n	8001002 <USART_SendData+0x9c>
		}
		else
			//parity bit used and 8bits of user data will be sent
			pTxbuffer++;
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	3301      	adds	r3, #1
 8000fc4:	60bb      	str	r3, [r7, #8]
 8000fc6:	e01c      	b.n	8001002 <USART_SendData+0x9c>
	}
	//8bit load the DR with 1 byte
	else{
		if(pUSARTHandle->USART_Config.USART_Parity == USART_PARITY_DISABLE)
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	7b9b      	ldrb	r3, [r3, #14]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d10a      	bne.n	8000fe6 <USART_SendData+0x80>
		pUSARTHandle->pUSARTx->DR |= (*pTxbuffer & (uint8_t)0xFF);
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	685a      	ldr	r2, [r3, #4]
 8000fd6:	68bb      	ldr	r3, [r7, #8]
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	4619      	mov	r1, r3
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	430a      	orrs	r2, r1
 8000fe2:	605a      	str	r2, [r3, #4]
 8000fe4:	e00a      	b.n	8000ffc <USART_SendData+0x96>
		else{
			pUSARTHandle->pUSARTx->DR |= (*pTxbuffer & (uint8_t)0x7F);}
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	6859      	ldr	r1, [r3, #4]
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	430a      	orrs	r2, r1
 8000ffa:	605a      	str	r2, [r3, #4]

		pTxbuffer++;
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	3301      	adds	r3, #1
 8001000:	60bb      	str	r3, [r7, #8]
	}
	//wait until TC is set by hardware if the transmission of a frame containing data is complete and if TXE is set
	while(! USART_GetFlagStatus(pUSARTHandle->pUSARTx, USART_FLAG_TC));
 8001002:	bf00      	nop
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	2140      	movs	r1, #64	; 0x40
 800100a:	4618      	mov	r0, r3
 800100c:	f7ff ff98 	bl	8000f40 <USART_GetFlagStatus>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d0f6      	beq.n	8001004 <USART_SendData+0x9e>
	for(uint32_t i=0; i<Len; i++){
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	3301      	adds	r3, #1
 800101a:	617b      	str	r3, [r7, #20]
 800101c:	697a      	ldr	r2, [r7, #20]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	429a      	cmp	r2, r3
 8001022:	d3a9      	bcc.n	8000f78 <USART_SendData+0x12>

	}
}
 8001024:	bf00      	nop
 8001026:	3718      	adds	r7, #24
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}

0800102c <__libc_init_array>:
 800102c:	b570      	push	{r4, r5, r6, lr}
 800102e:	2500      	movs	r5, #0
 8001030:	4e0c      	ldr	r6, [pc, #48]	; (8001064 <__libc_init_array+0x38>)
 8001032:	4c0d      	ldr	r4, [pc, #52]	; (8001068 <__libc_init_array+0x3c>)
 8001034:	1ba4      	subs	r4, r4, r6
 8001036:	10a4      	asrs	r4, r4, #2
 8001038:	42a5      	cmp	r5, r4
 800103a:	d109      	bne.n	8001050 <__libc_init_array+0x24>
 800103c:	f000 f81a 	bl	8001074 <_init>
 8001040:	2500      	movs	r5, #0
 8001042:	4e0a      	ldr	r6, [pc, #40]	; (800106c <__libc_init_array+0x40>)
 8001044:	4c0a      	ldr	r4, [pc, #40]	; (8001070 <__libc_init_array+0x44>)
 8001046:	1ba4      	subs	r4, r4, r6
 8001048:	10a4      	asrs	r4, r4, #2
 800104a:	42a5      	cmp	r5, r4
 800104c:	d105      	bne.n	800105a <__libc_init_array+0x2e>
 800104e:	bd70      	pop	{r4, r5, r6, pc}
 8001050:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001054:	4798      	blx	r3
 8001056:	3501      	adds	r5, #1
 8001058:	e7ee      	b.n	8001038 <__libc_init_array+0xc>
 800105a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800105e:	4798      	blx	r3
 8001060:	3501      	adds	r5, #1
 8001062:	e7f2      	b.n	800104a <__libc_init_array+0x1e>
 8001064:	0800108c 	.word	0x0800108c
 8001068:	0800108c 	.word	0x0800108c
 800106c:	0800108c 	.word	0x0800108c
 8001070:	08001090 	.word	0x08001090

08001074 <_init>:
 8001074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001076:	bf00      	nop
 8001078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800107a:	bc08      	pop	{r3}
 800107c:	469e      	mov	lr, r3
 800107e:	4770      	bx	lr

08001080 <_fini>:
 8001080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001082:	bf00      	nop
 8001084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001086:	bc08      	pop	{r3}
 8001088:	469e      	mov	lr, r3
 800108a:	4770      	bx	lr
