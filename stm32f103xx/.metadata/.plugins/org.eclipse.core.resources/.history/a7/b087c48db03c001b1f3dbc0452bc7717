/*
 * spi_master.c
 *
 *  Created on: 29 Nis 2020
 *      Author: ERCAN
 */

/*
 * PA6 --> SPI1_MISO
 * PA7 --> SPI1_MOSI
 * PA5 -> SPI1_SCLK
 * PA4 --> SPI1_NSS
 */

#include "stm32f103xx.h"
#include "spi_driver.h"
#include "gpio_driver.h"


#define LED_CONTROL			0x10
#define LED_ON				1
#define LED_OFF				0
#define LED_PIN				GPIO_PIN_NO_13

void delay(void){

	for(uint32_t i=0; i<50000; i++);
}

void SPI1_GPIO_MasterInit(void){

	GPIO_Handle_t SPIMaster;
	SPIMaster.pGPIOx = GPIOA;
	SPIMaster.GPIO_PinConfig.GPIO_OutputMode = GPIO_MODE_ALT_PP;
	SPIMaster.GPIO_PinConfig.GPIO_InputMode = GPIO_INPUT_PUPD;  //need to connect external pull-up
	SPIMaster.GPIO_PinConfig.GPIO_PinMode= GPIO_MODE_OUTPUT_SPEED_50M;

	SPIMaster.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_7;  // MOSI
	GPIO_Init(&SPIMaster);

	SPIMaster.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;  // MISO
	GPIO_Init(&SPIMaster);

	SPIMaster.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_5;  // SCLK
	GPIO_Init(&SPIMaster);

	SPIMaster.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_4;  // NSS
	GPIO_Init(&SPIMaster);

}

void SPI1_MasterInit(void){

	SPI_Handle_t SPIMasterhandle;
	SPIMasterhandle.pSPIx = SPI1;
	SPIMasterhandle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
	SPIMasterhandle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
	SPIMasterhandle.SPIConfig.SPI_SClkSpeed = SPI_SCLK_SPEED_DIV2;
	SPIMasterhandle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
	SPIMasterhandle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
	SPIMasterhandle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
	SPIMasterhandle.SPIConfig.SPI_SSM = SPI_SSM_DI;

	SPI_Init(&SPIMasterhandle);
}

void GPIO_Button(void){

	GPIO_Handle_t GPIOBtn;
	GPIOBtn.pGPIOx = GPIOC;
	GPIOBtn.GPIO_PinConfig.GPIO_InputMode = GPIO_INPUT_PUPD;
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode= GPIO_MODE_OUTPUT_SPEED_50M;
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;

	GPIO_Init(&GPIOBtn);
}

uint8_t SPI_VerifyResponse(uint8_t ackbyte){

	if(ackbyte == (uint8_t)0xAA){
		return 1;
	}
	return 0;
}


int main()
{
	uint8_t dummy_write = 0xBB;
	uint8_t dummy_read;

	GPIO_Button();
	SPI1_GPIO_MasterInit();
	SPI1_MasterInit();
	//NSS output enabled (SSM = 0, SSOE = 1)  when the device operates in master mode and NSS signal is driven low
	SPI_SSOEConfig(SPI1, ENABLE);

	GPIO_WriteToOutputPin(GPIOC, GPIO_PIN_NO_14, GPIO_PIN_SET);
	while(1){

			while(!GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NO_12));

			delay();

			SPI_PeripheralControl(SPI1, ENABLE);

			uint8_t command = LED_CONTROL;
			uint8_t ack;
			uint8_t state[2];


			SPI_SendData(SPI1, &command,1); 	// send command

			SPI_ReceiveData(SPI1, &dummy_read, 1); 	// read dummy to clear RXNE

			SPI_SendData(SPI1, &dummy_write, 1);  // send dummy fetch response from slave

			SPI_ReceiveData(SPI1, &ack, 1);	 //read acknowledge from slave

			if(SPI_VerifyResponse(ack)){

				state[0] = LED_ON;
				state[1] = LED_PIN;
				SPI_SendData(SPI1, state, 2);
			}

			while(SPI_GetFlagStatus(SPI1,SPI_FLAG_BUSY));  // SPI (or I2S) is busy in communication or Tx buffer is not empty
			SPI_PeripheralControl(SPI1, DISABLE);
		}

	return 0;
}




