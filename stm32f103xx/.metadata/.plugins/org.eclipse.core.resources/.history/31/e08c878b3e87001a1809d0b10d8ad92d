/*
 * stm32f103xx_spi_driver.c
 *
 *  Created on: 24 Nis 2020
 *      Author: ERCAN
 */

#include "stm32f103xx_spi_driver.h"


/*********************************************************************
 * @fn      		  - SPI_PeriClockControl
 *
 * @brief             - This function enables or disables peripheral clock for the given SPIx
 *
 * @param[in]         - base address of the SPI peripheral
 * @param[in]         - ENABLE or DISABLE macros
 *
 * @return            -  none
 *
 * @Note              -  none
 */

void SPI_PClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
	if(EnorDi == ENABLE)
{
	if(pSPIx == SPI1)
	{
		SPI1_PCLK_EN();

	}else if(pSPIx == SPI2)
	{
		SPI2_PCLK_EN();
	}
	else if(pSPIx == SPI3)
	{
		SPI3_PCLK_EN();
	}
}
	else if (EnorDi == DISABLE)
	{

	if(pSPIx == SPI1)
	{
		SPI1_PCLK_DI();

	}else if(pSPIx == SPI2)
	{
		SPI2_PCLK_DI();
	}
	else if(pSPIx == SPI3)
	{
		SPI3_PCLK_DI();
	}
	}
}

void SPI_Init(SPI_Handle_t *pSPIHandle)
{
	SPI_PClockControl(pSPIHandle->pSPIx, ENABLE);

	SPI_GetFlagStatus(pSPIHandle->pSPIx , SPI_RXNE_FLAG);

	// Configure the device mode
	pSPIHandle->pSPIx->CR1 |= pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR;

	// Configure the Bus
	if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD){

		(pSPIHandle->pSPIx->CR1) &= ~(1 << SPI_CR1_BIDIMODE);
	}
	else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD){

		(pSPIHandle->pSPIx->CR1) |= (1 << SPI_CR1_BIDIMODE);
	}
	else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SRX){

		(pSPIHandle->pSPIx->CR1) &= ~(1 << SPI_CR1_BIDIMODE);
		(pSPIHandle->pSPIx->CR1) |= (1 << SPI_CR1_RXONLY);
	}
	// Configure the SPI Serial Clock Speed baud rate
	pSPIHandle->pSPIx->CR1 |= (pSPIHandle->SPIConfig.SPI_SClkSpeed << SPI_CR1_BR);

	// Configure the CPOL
	pSPIHandle->pSPIx->CR1 |= (pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL);

	// Configure the CPHA
	pSPIHandle->pSPIx->CR1 |= (pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA);

	// Configure the DFF
	pSPIHandle->pSPIx->CR1 |= (pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF);

	// Configure the SSM Slave Management Software
	pSPIHandle->pSPIx->CR1 |= (pSPIHandle->SPIConfig.SPI_SSM << SPI_CR1_SSM);

	SPI_GetFlagStatus(SPI1 ,SPI_TXE_FLAG);
}


void SPI_DeInit(SPI_RegDef_t *pSPIx)
{
	if(pSPIx == SPI1)
		{
			SPI1_REG_RESET();

		}else if(pSPIx == SPI2)
		{
			SPI2_REG_RESET();
		}
		else if(pSPIx == SPI3)
		{
			SPI3_REG_RESET();
		}
}

uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx , uint32_t FlagName)
{
	if(pSPIx->SR & FlagName)
	{
		return FLAG_SET;
	}
	return FLAG_RESET;
}


void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t Len )
{
	while(Len > 0)
{

	while(SPI_GetFlagStatus(pSPIx,SPI_TXE_FLAG) == FLAG_RESET ); 	// wait until TXE is set

	if( (pSPIx->CR1 & ( 1 << SPI_CR1_DFF) ) ) 		// check the DFF bit in CR1

	{
		//16 bit DFF load the data in to the DR
		pSPIx->DR =  *((uint16_t*)pTxBuffer);
		Len--;
		Len--;
		(uint16_t*)pTxBuffer++;

	}else
	{
		//8 bit DFF
		pSPIx->DR = *pTxBuffer;
		Len--;
		pTxBuffer++;
	}
}

}
void SPI_ReceiveData(SPI_RegDef_t *pSPIx, uint8_t *pRxBuffer, uint32_t Len )
{

}

void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
	if(EnOrDi == ENABLE)
	{
		pSPIx->CR1 |=  (1 << SPI_CR1_SPE);
	}else
	{
		pSPIx->CR1 &=  ~(1 << SPI_CR1_SPE);
	}


}

void SPI_SSIConfig(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
	if(EnOrDi == ENABLE)
	{
		pSPIx->CR1 |=  (1 << SPI_CR1_SSI);

	}else
	{
		pSPIx->CR1 &=  ~(1 << SPI_CR1_SSI);
	}
}


void SPI_IRQITConfig(uint8_t IRQNumber, uint8_t EnorDi)
{

}
void SPI_IRQPriorityConfig(uint32_t IRQPriority, uint8_t IRQNumber)
{

}
void SPI_IRQHandling(SPI_Handle_t *pHandle)
{

}
